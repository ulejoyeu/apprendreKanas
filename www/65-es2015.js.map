{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-spinner.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2F;AACzC;AACY;;AAE9D;AACA;AACA;AACA;AACA;AACA,wCAAwC,sCAAsC;AAC9E,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,sCAAsC;AAC9E,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAM;AACxC,qBAAqB,4DAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,GAAG,wBAAwB,EAAE,4DAAkB,eAAe,2BAA2B,KAAK,6CAA6C,oDAAM,yBAAyB,GAAG;AACnM;AACA,wBAAwB,eAAe,qBAAqB,kBAAkB,WAAW,YAAY,mBAAmB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,kBAAkB,4BAA4B,IAAI,OAAO,MAAM,gCAAgC,wBAAwB,kBAAkB,WAAW,YAAY,gCAAgC,wBAAwB,2CAA2C,WAAW,YAAY,QAAQ,6CAA6C,qCAAqC,4DAA4D,iBAAiB,qBAAqB,oBAAoB,0DAA0D,sDAAsD,8CAA8C,4BAA4B,uDAAuD,+CAA+C,kBAAkB,4BAA4B,sDAAsD,8CAA8C,kBAAkB,gCAAgC,iBAAiB,iBAAiB,uBAAuB,uBAAuB,oBAAoB,6BAA6B,oDAAoD,4CAA4C,4BAA4B,eAAe,kBAAkB,yBAAyB,kDAAkD,0CAA0C,2BAA2B,oCAAoC,4BAA4B,qCAAqC,GAAG,UAAU,GAAG,WAAW,6BAA6B,GAAG,UAAU,GAAG,WAAW,sCAAsC,GAAG,2BAA2B,mBAAmB,GAAG,2BAA2B,oBAAoB,8BAA8B,GAAG,2BAA2B,mBAAmB,GAAG,2BAA2B,oBAAoB,mCAAmC,GAAG,+BAA+B,uBAAuB,GAAG,gCAAgC,yBAAyB,2BAA2B,GAAG,+BAA+B,uBAAuB,GAAG,gCAAgC,yBAAyB,iCAAiC,GAAG,2BAA2B,mBAAmB,WAAW,IAAI,4BAA4B,oBAAoB,WAAW,GAAG,2BAA2B,mBAAmB,YAAY,yBAAyB,GAAG,2BAA2B,mBAAmB,WAAW,IAAI,4BAA4B,oBAAoB,WAAW,GAAG,2BAA2B,mBAAmB,YAAY,EAAE;AAC/tF;AACA;AACA;AACA,0CAA0C,SAAS;AACnD,YAAY,4DAAC,SAAS,0CAA0C,EAAE,4DAAC,YAAY,2CAA2C;AAC1H;AACA;AACA;AACA,0CAA0C,SAAS;AACnD,YAAY,4DAAC,SAAS,0CAA0C,EAAE,4DAAC,UAAU,0DAA0D;AACvI;;AAEkC","file":"65-es2015.js","sourcesContent":["import { r as registerInstance, d as getIonMode, h, H as Host } from './chunk-d0403a2f.js';\nimport { b as config } from './chunk-1074393c.js';\nimport { c as createColorClasses } from './chunk-353a032e.js';\n\nconst spinners = {\r\n    'lines': {\r\n        dur: 1000,\r\n        lines: 12,\r\n        fn: (dur, index, total) => {\r\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\r\n            const animationDelay = `${(dur * index / total) - dur}ms`;\r\n            return {\r\n                y1: 17,\r\n                y2: 29,\r\n                style: {\r\n                    'transform': transform,\r\n                    'animation-delay': animationDelay,\r\n                }\r\n            };\r\n        }\r\n    },\r\n    'lines-small': {\r\n        dur: 1000,\r\n        lines: 12,\r\n        fn: (dur, index, total) => {\r\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\r\n            const animationDelay = `${(dur * index / total) - dur}ms`;\r\n            return {\r\n                y1: 12,\r\n                y2: 20,\r\n                style: {\r\n                    'transform': transform,\r\n                    'animation-delay': animationDelay,\r\n                }\r\n            };\r\n        }\r\n    },\r\n    'bubbles': {\r\n        dur: 1000,\r\n        circles: 9,\r\n        fn: (dur, index, total) => {\r\n            const animationDelay = `${(dur * index / total) - dur}ms`;\r\n            const angle = 2 * Math.PI * index / total;\r\n            return {\r\n                r: 5,\r\n                style: {\r\n                    'top': `${9 * Math.sin(angle)}px`,\r\n                    'left': `${9 * Math.cos(angle)}px`,\r\n                    'animation-delay': animationDelay,\r\n                }\r\n            };\r\n        }\r\n    },\r\n    'circles': {\r\n        dur: 1000,\r\n        circles: 8,\r\n        fn: (dur, index, total) => {\r\n            const step = index / total;\r\n            const animationDelay = `${(dur * step) - dur}ms`;\r\n            const angle = 2 * Math.PI * step;\r\n            return {\r\n                r: 5,\r\n                style: {\r\n                    'top': `${9 * Math.sin(angle)}px`,\r\n                    'left': `${9 * Math.cos(angle)}px`,\r\n                    'animation-delay': animationDelay,\r\n                }\r\n            };\r\n        }\r\n    },\r\n    'crescent': {\r\n        dur: 750,\r\n        circles: 1,\r\n        fn: () => {\r\n            return {\r\n                r: 26,\r\n                style: {}\r\n            };\r\n        }\r\n    },\r\n    'dots': {\r\n        dur: 750,\r\n        circles: 3,\r\n        fn: (_, index) => {\r\n            const animationDelay = -(110 * index) + 'ms';\r\n            return {\r\n                r: 6,\r\n                style: {\r\n                    'left': `${9 - (9 * index)}px`,\r\n                    'animation-delay': animationDelay,\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\nconst SPINNERS = spinners;\n\nclass Spinner {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * If `true`, the spinner's animation will be paused.\n         */\n        this.paused = false;\n    }\n    getName() {\n        const name = this.name || config.get('spinner');\n        const mode = getIonMode(this);\n        if (name) {\n            return name;\n        }\n        return (mode === 'ios') ? 'lines' : 'crescent';\n    }\n    render() {\n        const mode = getIonMode(this);\n        const name = this.getName();\n        const spinner = SPINNERS[name] || SPINNERS['lines'];\n        const duration = (typeof this.duration === 'number' && this.duration > 10 ? this.duration : spinner.dur);\n        const svgs = [];\n        if (spinner.circles !== undefined) {\n            for (let i = 0; i < spinner.circles; i++) {\n                svgs.push(buildCircle(spinner, duration, i, spinner.circles));\n            }\n        }\n        else if (spinner.lines !== undefined) {\n            for (let i = 0; i < spinner.lines; i++) {\n                svgs.push(buildLine(spinner, duration, i, spinner.lines));\n            }\n        }\n        return (h(Host, { class: Object.assign({}, createColorClasses(this.color), { [mode]: true, [`spinner-${name}`]: true, 'spinner-paused': !!this.paused || config.getBoolean('_testing') }) }, svgs));\n    }\n    static get style() { return \":host{display:inline-block;position:relative;width:28px;height:28px;color:var(--color);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.ion-color){color:var(--ion-color-base)}svg{left:0;top:0;-webkit-transform-origin:center;transform-origin:center;position:absolute;width:100%;height:100%;-webkit-transform:translateZ(0);transform:translateZ(0)}:host-context([dir=rtl]) svg,[dir=rtl] svg{left:unset;right:unset;right:0;-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}:host(.spinner-lines) line,:host(.spinner-lines-small) line{stroke-width:4px;stroke-linecap:round;stroke:currentColor}:host(.spinner-lines) svg,:host(.spinner-lines-small) svg{-webkit-animation:spinner-fade-out 1s linear infinite;animation:spinner-fade-out 1s linear infinite}:host(.spinner-bubbles) svg{-webkit-animation:spinner-scale-out 1s linear infinite;animation:spinner-scale-out 1s linear infinite;fill:currentColor}:host(.spinner-circles) svg{-webkit-animation:spinner-fade-out 1s linear infinite;animation:spinner-fade-out 1s linear infinite;fill:currentColor}:host(.spinner-crescent) circle{fill:transparent;stroke-width:4px;stroke-dasharray:128px;stroke-dashoffset:82px;stroke:currentColor}:host(.spinner-crescent) svg{-webkit-animation:spinner-rotate 1s linear infinite;animation:spinner-rotate 1s linear infinite}:host(.spinner-dots) circle{stroke-width:0;fill:currentColor}:host(.spinner-dots) svg{-webkit-animation:spinner-dots 1s linear infinite;animation:spinner-dots 1s linear infinite}:host(.spinner-paused) svg{-webkit-animation-play-state:paused;animation-play-state:paused}\\@-webkit-keyframes spinner-fade-out{0%{opacity:1}to{opacity:0}}\\@keyframes spinner-fade-out{0%{opacity:1}to{opacity:0}}\\@-webkit-keyframes spinner-scale-out{0%{-webkit-transform:scale(1);transform:scale(1)}to{-webkit-transform:scale(0);transform:scale(0)}}\\@keyframes spinner-scale-out{0%{-webkit-transform:scale(1);transform:scale(1)}to{-webkit-transform:scale(0);transform:scale(0)}}\\@-webkit-keyframes spinner-rotate{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}\\@keyframes spinner-rotate{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}\\@-webkit-keyframes spinner-dots{0%{-webkit-transform:scale(1);transform:scale(1);opacity:.9}50%{-webkit-transform:scale(.4);transform:scale(.4);opacity:.3}to{-webkit-transform:scale(1);transform:scale(1);opacity:.9}}\\@keyframes spinner-dots{0%{-webkit-transform:scale(1);transform:scale(1);opacity:.9}50%{-webkit-transform:scale(.4);transform:scale(.4);opacity:.3}to{-webkit-transform:scale(1);transform:scale(1);opacity:.9}}\"; }\n}\nconst buildCircle = (spinner, duration, index, total) => {\n    const data = spinner.fn(duration, index, total);\n    data.style['animation-duration'] = `${duration}ms`;\n    return (h(\"svg\", { viewBox: \"0 0 64 64\", style: data.style }, h(\"circle\", { transform: \"translate(32,32)\", r: data.r })));\n};\nconst buildLine = (spinner, duration, index, total) => {\n    const data = spinner.fn(duration, index, total);\n    data.style['animation-duration'] = `${duration}ms`;\n    return (h(\"svg\", { viewBox: \"0 0 64 64\", style: data.style }, h(\"line\", { transform: \"translate(32,32)\", y1: data.y1, y2: data.y2 })));\n};\n\nexport { Spinner as ion_spinner };\n"],"sourceRoot":""}